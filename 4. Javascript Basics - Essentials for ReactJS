Javascript Basics - Essentials for ReactJS

Topics to be covered
-Javascript Basics
-Data Types
-Javascript Functions
-ES6 Features
-Asynchronous Programming
-Promises
-Async/Await

Javascript Basics
-Javascript is a dynamic, weakly typed programming language which compiles at runtime.
-Executed as a part of webpage in the browser or on any host environment.
-Created to make webpages more dynamic(manipulating DOM and implementing many other functionalities)
-Javascript makes webpages more reactive.
-Javascript is an event-driven programming language.
-Javascript is synchronous single threaded language.
-Javascript is totally independent from JAVA and has nothing in common.

Javascript Data Types
-Primitive Data Type: Single simple data value with no additional properties:
--String: Ex: let userName = 'Sripad';
--Number: Ex: let actionType = 10;
--Boolean: Ex: let isAction = true;
--Undefined: Ex: let hasAction = undefined;
-Complex Data Type: May have additional properties and/or method(s):
--Boject: Ex: let actionProperties = { key: 'value'};
--Function: 
Ex: let executeAction = function() {
    console.log('Something')'
}
-We can make use of 'typeof' operator to check the data type of Javascript variable.

Javascript Functions
-Functions are a block of code designed to perform certain task.
-Functions are not executed automatically, instead executed when invocation occurs.
-Syntax: function something() {  //code..  }
--function keyword followed by parentheses{}
--Can take parameters
--All logic is written inside curly braces {}
-When return statement is encountered, function will stop execution and value is returned to the other.

-# Arrow Functions
--Introduced in ECMAScript.
--Shorter Syntax
--Helps in overcoming issue that may occur by hoisting. 

#Callback Functions
-A function which is passed as an argument to another function.
-This technique enables a function to call another function which is being passed as an argument.
-Really useful in Asynchronous Programming and operations.

ECMAScript6 Features
-forEach vs map
--forEach executes a provided function once for each element in array and does'nt return anyhing whereas map creates a new array with the result of provided function.
--Map is much faster than forEach.
--Map allocates memory and store returned values.
-Spread Operator
--To copy the array or object.
--Addresses are copied not the references.
let block = [1,2];
let copiedBlock = [...block];
-Destructuring
--Works left to right.
--Pulls out the values based on index.
--Rest operator can be used to collect all the indexes remaining.
let data = ['Sripad','Hero','SDE']
let [firstName, lastName, ...restInformation ] = data
console.log({firstName, lastName, restInformation})

Asynchronous Programming
-Asynchronous means that things can run independently of the main program flow.
-Traditionally every program runs for a specific time slot and then it stops and let another program continues their execution.
    This thing happens so fast that it seems like an illusion of simultneous execution except on multiprocess machines.
-Javascript is synchronous and single threaded, execution happens line after line.
-Certain operations take a bit longer to execute, so not to block our main thread "Asynchronous Code Execution" comes into picture.
-These operations are handled by Environment i.e, Browser, Browser provides a way to do it by providing a set of APIs that can handle these kind of functions.
-Callbacks are the heart of Asynchronous Programming, used everywhere in Javascript not just in DOM events.
For example:
--setTimeout
--HTTP Calls
--Local Storage,etc.
-Problem with Callback(s)
--Callback Hell !
---Nesting levels can be increased when there are a lot of Callbacks.

Javascript Promises
-The Promise object supports two properties: state and result.
-Used to handle asynchronous actions may result in success or failure.
-Three states:
--Pending
--Fulfilled
--Rejected
-When a Promise object is "fulfilled", the result is a value. When a Promise object is "rejected", the result is an error object.

Async/Await
-Special syntax to work with promises.
-Easy to use and understand
-'async' means -- a function will always return a promise.
-'await' only works inside "async functions"
-It makes code execution synchronous i.e, line after line
async function employeeMap(){
    let id = await getEmployeeId();
    let details = await getEmployeeDetails(id);
    console.log({ id,details })
}
